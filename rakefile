require 'rubygems'
require 'rest_client'
require 'crack/json'
require 'aws/s3'

task :environment do
  config = YAML.load(File.read('config.yml'))  
  @key = config['production']['key']
  @bucket = config['production']['bucket']
  @url = config['production']['url']

  @client = RestClient::Resource.new @url

  @files = Dir.glob('**/*.haml') + Dir.glob('**/*.markdown') 
  @images = Dir.glob('images/**/*.jpeg') + Dir.glob('images/**/*.png') + Dir.glob('images/**/*.gif') + Dir.glob('images/**/*.jpg')   
  @stylesheets = Dir.glob('stylesheets/**/*.css')
  @javascripts = Dir.glob('javascripts/**/*.js')
  @swfs = Dir.glob('swfs/**/*.swf')
  @pdfs = Dir.glob('pdfs/**/*.pdf')
  @flvs = Dir.glob('flvs/**/*.flv')

end

namespace :deploy do

  task(:pages => :environment) do
    puts "Updateing #{@url}"
    @files.each do |f|
      page_file = open(f)
      deploy_file(f.split('.')[0], f.split('.')[1], page_file.read, page_file.mtime)
    end    
  end
  
  task(:images => :environment) do
    # upload images to s3
    @images.each do |i|
      store_asset i
    end  
  end

  task(:stylesheets => :environment) do
    @stylesheets.each do |css|
      store_asset css
    end  
  end

  task(:javascripts => :environment) do
    # upload javascripts s3
    @javascripts.each do |js|
      store_asset js
    end  
  end

  task(:swfs => :environment) do
    # upload flash to s3
    @swfs.each do |swf|
      store_asset swf
    end  
  end

  task(:pdfs => :environment) do
    # upload pdfs to s3
    @pdfs.each do |pdf|
      store_asset pdf
    end  
  end
  
  task(:flvs => :environment) do
    # upload pdfs to s3
    @flvs.each do |flv|
      store_asset flv
    end  
  end
  
    
end

def deploy_file(name, type, body, date_changed)
  # Find Page?
  page = Crack::JSON.parse(@client["/pages/#{name}?api_key=#{@key}"].get)
  if page.nil?
    puts "Posting #{name}.#{type}"
    ## Create
    page = @client['/pages'].post :page => {
      :page_type => type,
      :name => name,
      :body => body
    }, :api_key => @key
    puts "Successfully created #{name}"    
  elsif page and Time.parse(page["updated_at"]) < date_changed
    ## Update
    page = @client["/pages/#{page["id"]}"].put :page => {
      :page_type => type,
      :name => name,
      :body => body
    }, :api_key => @key
    puts "Successfully updated #{name}"
  else
    puts "NoChange #{name}"
  end
  
end

def store_asset(asset_name)
  AWS::S3::Base.establish_connection!(:access_key_id => ENV['AMAZON_ACCESS_KEY_ID'], :secret_access_key => ENV['AMAZON_SECRET_ACCESS_KEY'])
  AWS::S3::Bucket.create(@bucket)
  asset_file = open(asset_name)
  begin
    s3object = AWS::S3::S3Object.find(asset_name, @bucket)
    if s3object and asset_file.mtime > Time.parse(s3object.about[:last_modified])
      AWS::S3::S3Object.store(asset_name, asset_file, @bucket, :access => :public_read )
      puts "Successfully uploaded #{asset_name}"
    else
      puts "No Changes for #{asset_name}"    
    end
  rescue
    AWS::S3::S3Object.store(asset_name, asset_file, @bucket, :access => :public_read )
    puts "Successfully added #{asset_name}"
    
  end
  
end

